



/*Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]
*/
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        ArrayList<List<Integer>> result = new ArrayList<List<Integer>>();
        if(candidates == null || candidates.length == 0){
            return result;
        }
        ArrayList<Integer> list = new ArrayList<Integer>();
        Arrays.sort(candidates);
        dfs(result,list,candidates,target,0);
        return result;
        
        
    }
    public void dfs(List<List<Integer>> result, List<Integer> list, int[] candidates, int target, int pos){
        if(target < 0) return;
        if(target == 0){
            result.add(new ArrayList<Integer>(list));
        }
        for(int i = pos; i < candidates.length; i++){
            
            list.add(candidates[i]);
            int newTarget = target - candidates[i];
            dfs(result,list,candidates,newTarget,i);
            list.remove(list.size()-1);
        }
        
    }
}
