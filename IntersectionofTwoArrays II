//allow duplicate

//Given two arrays, write a function to compute their intersection.

//Example:
//Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].

//Note:
//Each element in the result should appear as many times as it shows in both arrays.
//The result can be in any order.
//Follow up:
//What if the given array is already sorted? How would you optimize your algorithm?
//What if nums1's size is small compared to nums2's size? Which algorithm is better?
//What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args){
      Solution sol = new Solution();
      int[] nums1 ={1,2,2,1};
      int[] nums2 = {2,2};
  
      int[] result = sol.intersect(nums1, nums2);
        for (int ele: result){
              System.out.println(ele +"");
        }
    
    }
        public int[] intersect(int[] nums1, int[] nums2) {
        List<Integer> res = new ArrayList<Integer>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0; 
        int j = 0;
        while( i< nums1.length && j<nums2.length){
                if(nums1[i]<nums2[j]){
                    i++;
                }
                else if(nums1[i] == nums2[j]){
                    res.add(nums1[i]);
                    i++;
                    j++;
                }
                else{
                    j++;
                }
        }
        int[] result = new int[res.size()];
        for(int m = 0; m<res.size();m++){
            result[m] = res.get(m);
        }
        return result;
    }
}

//no duplicate

public class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set = new HashSet<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i=0;
        int j = 0;
        while(i < nums1.length && j < nums2.length){
            if( nums1[i] < nums2[j]) i++;
            else if( nums1[i] > nums2[j]) j++;
            else{
                set.add(nums1[i]);
                i++;
                j++;
            }
        }
        int[] result = new int[set.size()];
        int k = 0;
        for(int item: set){
            result[k++] = item;
        }
        return result;
    }
}




//Intersection of Two Linked Lists

//Write a program to find the node at which the intersection of two singly linked lists begins.


//For example, the following two linked lists:

//A:          a1 → a2
//                   ↘
//                     c1 → c2 → c3
//                   ↗            
//B:     b1 → b2 → b3
//begin to intersect at node c1

public class Solution {
public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    if(headA==null || headB==null)return null;

    ListNode a=headA;
    ListNode b=headB;
    while(a!=b){
        a=a==null?headB:a.next;
        b=b==null?headA:b.next;

    }
    return b;

}

}


  public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    ListNode p1 = headA, p2 = headB;
    int len1 = 0, len2 = 0;
    while (p1 != null) {
        p1 = p1.next;
        len1++;
    }
    while (p2 != null) {
        p2 = p2.next;
        len2++;
    }
    p1 = headA;
    p2 = headB;
    if (len1 > len2) {
        for (int i = 0;i < len1 - len2; i++) {
            p1 = p1.next;
        }
    } else {
        for (int i = 0;i < len2 - len1; i++) {
            p2 = p2.next;
        }
    }
    while (p1 != p2) {
        p1 = p1.next;
        p2 = p2.next;
    }
    return p1;
}
