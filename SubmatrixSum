/*
Given an integer matrix, find a submatrix where the sum of numbers is zero. 
Your code should return the coordinate of the left-up and right-down number.

Given matrix

[
  [1 ,5 ,7],
  [3 ,7 ,-8],
  [4 ,-8 ,9],
]
return [(1,1), (2,2)]

time O(n^3)
*/



public class Solution {
    /**
     * @param matrix an integer matrix
     * [url=home.php?mod=space&uid=160137]@return[/url] the coordinate of the left-up and right-down number
     */
    public int[][] submatrixSum(int[][] matrix) {
        int[][] res = new int[][] {{0, 0}, {0, 0}};
        if (matrix != null && matrix.length > 0) {
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix[0].length; j++) {
                    matrix[i][j] += (i - 1 >= 0 ? matrix[i - 1][j] : 0) + (j - 1 >= 0 ? matrix[i][j - 1] : 0) - (i - 1 >= 0 && j - 1 >= 0 ? matrix[i - 1][j - 1] : 0);
                }
            }
            for (int i = 0; i < matrix.length; i++) {
                for (int j = i; j < matrix.length; j++) {
                    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
                    int sum = 0;
                    map.put(0, -1);
                    for (int k = 0; k < matrix[0].length; k++) {
                        sum = getSum(matrix, i, 0, j, k);
                        if (map.containsKey(sum)) {
                            res = new int[][] {{i, map.get(sum) + 1}, {j, k}};
                            return res;
                        } else {
                            map.put(sum, k);
                        }
                    }
                }
            }
        }
        return res;
    }
    private int getSum(int[][] matrix, int x1, int y1, int x2, int y2) {
        return matrix[x2][y2] - (x1 - 1 >= 0 ? matrix[x1 - 1][y2] : 0) - (y1 - 1 >= 0 ? matrix[x2][y1 - 1] : 0) + (x1 - 1 >= 0 && y1 - 1 >= 0 ? matrix[x1 - 1][y1 - 1] : 0);
    }
}
